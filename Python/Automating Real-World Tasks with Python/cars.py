#!/usr/bin/env python3

import json
import locale
import sys
import os
import reports
import emails

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename, "r", encoding="utf-8") as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  locale.setlocale(locale.LC_ALL, 'en_US.UTF8')
  max_revenue = {"revenue": 0}
  max_sales = {"sales": 0}
  pop_year = {}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    item_sales = item["total_sales"]
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    # Handle max sales
    if item_sales > max_sales["sales"]:
      item["sales"] = item_sales
      max_sales = item
    # Handle most popular car_year
    if not item["car"]["car_year"] in pop_year.keys():
      pop_year[item["car"]["car_year"]] = item["total_sales"]
    else:
      pop_year[item["car"]["car_year"]] += item["total_sales"]
    best_sales = max(pop_year.values())
    best_year = max(pop_year, key = pop_year.get)
  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most sales: {}".format(
      format_car(max_sales["car"]), max_sales["sales"]),
    "The most popular year was {} with {} sales".format(
      best_year, best_sales),
  ]

  return summary
  
def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)
  table_data = cars_dict_to_table(data)
  separator = "\n"
  body = separator.join(summary)
  # Turn this into a PDF report
  reports.generate("/tmp/cars.pdf", "Sales summary for last month", body, table_data)
  # Send the PDF report as an email attachment
  sender = "automation@example.com"
  receiver = "{}@example.com".format(os.environ.get('USER'))
  subject = "Sales summary for last month"

  message = emails.generate(sender, receiver, subject, body, "/tmp/cars.pdf")
  emails.send(message)

if __name__ == "__main__":
  main(sys.argv)

